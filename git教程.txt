hello git
https://github.com/boniu-w/gitProject.git

echo "# gitProject" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/boniu-w/gitProject.git
git push -u origin master

0.安装完成后 进一步设置
  git config --global user.name "Your Name"
  git config --global user.email "email@example.com"
  之后,在一个空的文件夹下输入
  git init
  会生成一个.git 的文件 表示这个文件夹 是一个 git可以管理的本地库

1.要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
  分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常
工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，
真是太方便了！

2.要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

3.提交一个项目到GitHub
  比如在gitskills文件夹下 这是我在GitHub上clone的repository,cd到这个文件夹下,右键打开bash,出现命令
窗口,执行git语句
		git add README.md
		git commit -m "first commit"
		git remote add origin https://github.com/boniu-w/gitProject.git
		git push -u origin master
		
    就可以了
	第三条 命令 再第一次执行过以后 就可以省略掉了 因为 在此文件夹下的.git文件中已保存了 地址
	第四条命令中的 -u 也可以省略掉了

4.git log --pretty=online
查看历史记录
5.创建分支
  git checkout -b dev
  -b参数表示创建并切换，相当于以下两条命令：
  git branch dev
  git checkout dev
  查看当前分支,git branch命令会列出所有分支，当前分支前面会标一个*号
  git branch
  然后，我们就可以在dev分支上正常提交
  git add test1.txt 
  git commit -m "branch test"

6.现在切换回master

  git checkout master
  
  切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！
  因为那个提交是在dev分支上，而master分支此刻的提交点并没有变
  现在，我们把dev分支的工作成果合并到master分支上
  
  git merge dev
  
  git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，
  就可以看到，和dev分支的最新提交是完全一样的。
  注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是
  直接把master指向dev的当前提交，所以合并速度非常快
  当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。
  合并完成后，就可以放心地删除dev分支了
  
  git branch -d dev
  
  删除后，查看branch，就只剩下master分支了：
  git branch
  因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，
  这和直接在master分支上工作效果是一样的，但过程更安全
7.小结
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>





